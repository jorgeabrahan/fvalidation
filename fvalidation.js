!(function (e, t) { typeof exports === 'object' && typeof module === 'object' ? module.exports = t() : typeof define === 'function' && define.amd ? define('fvalidation', [], t) : typeof exports === 'object' ? exports.fvalidation = t() : e.fvalidation = t() }(self, () => (() => {
  const e = {}; ((e) => { typeof Symbol !== 'undefined' && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, { value: 'Module' }), Object.defineProperty(e, '__esModule', { value: !0 }) })(e); const t = new class {
    constructor () {
      this.emailRegex = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/, this.dateRegex = /^[0-9]{1,2}\/[0-9]{1,2}\/[0-9]{4}$/, this.dateRegexYearFirst = /^[0-9]{4}\/[0-9]{1,2}\/[0-9]{1,2}$/, this.symbolsRegex = /[^\!\@\#\$\%\^\&\*\)\(\+\=\.\<\>\{\}\[\]\:\;\'\"\|\~\`\_\-\/\\]/g, this.currentYear = (new Date()).getFullYear(), this.minPwdLenght = 15, this.maxPwdLength = 1 / 0, this.minAmountLowerLetters = 5, this.minAmountCapitalLetters = 5, this.minAmountNumbers = 3, this.minAmountSymbols = 2, this.errorCodes = {
        date: {
          yearIsNotPositionedWhereItShould: 'date/yearIsNotPositionedWhereItShould', dayIsLessThanZero: 'date/dayIsLessThanZero', monthIsLessThanZero: 'date/monthIsLessThanZero', yearIsNotInRange: 'date/yearIsNotInRange', monthIsGreaterThanPermitted: 'date/monthIsGreaterThanPermitted', dayIsGreaterThanPossible: 'date/dayIsGreaterThanPossible'
        },
        password: {
          lengthIsLowerThanPermitted: 'password/lengthIsLowerThanPermitted', lengthIsGreaterThanPermitted: 'password/lengthIsGreaterThanPermitted', capitalLettersAmountIsLessThanPermitted: 'password/capitalLettersAmountIsLessThanPermitted', lowerLettersAmountIsLessThanPermitted: 'password/lowerLettersAmountIsLessThanPermitted', symbolsAmountIsLessThanPermitted: 'password/symbolsAmountIsLessThanPermitted'
        }
      }, this.error = ''
    }

    changePasswordValidation (e = 15, t = 1 / 0, r = 5, s = 5, i = 3, n = 2) { r + s + i + n > e ? console.error('password/totalRequirementsIsGreaterThanMinLength') : t < e ? console.error('password/minLengthIsGreaterThanMaxLength') : (this.minPwdLenght = e, this.maxPwdLength = t, this.minAmountLowerLetters = r, this.minAmountCapitalLetters = s, this.minAmountNumbers = i, this.minAmountSymbols = n) }

    isArrayOfType (e, t) { return !!Array.isArray(e) && e.every((e) => typeof e === t) }

    isArrayOfTypes (e, t) { return !!Array.isArray(e) && e.every((e) => t.some((t) => typeof e === t)) }

    isEmpty (e) { return e.length === 0 }

    hasSpaces (e) { return e.trim().includes(' ') }

    hasFractionalValue (e) { return !(!this.isNumber(e) || parseInt(e.toString(), 10) === Number(e)) }

    isNumber (e) { return !this.isEmpty(e.toString()) && !isNaN(Number(e)) }

    areAllNumbers (e) { for (const t of e) if (!this.isNumber(t)) return !1; return !0 }

    isPositive (e) { return !!this.isNumber(e) && Number(e) > 0 }

    areAllPositives (e) { return e.every((e) => this.isPositive(e)) }

    isNegative (e) { return !!this.isNumber(e) && Number(e) < 0 }

    areAllNegatives (e) { return e.every((e) => this.isNegative(e)) }

    isZero (e) { return !!this.isNumber(e) && Number(e) === 0 }

    areAllZeros (e) { return e.every((e) => this.isZero(e)) }

    isInRange (e, t, r) { return !!this.isNumber(e) && !(Number(e) > r || Number(e) < t) }

    isInLengthRange (e, t, r) { return !(e.length > r || e.length < t) }

    isEmail (e) { return this.emailRegex.test(e.trim()) }

    getFieldIndexFromDate (e, t) { const r = e.split('/'); return r.indexOf(r.find((e) => e === t) || '') }

    isYearPositionedCorrectly (e, t = 'DD/MM/YYYY') { return !!(this.getFieldIndexFromDate(t, 'YYYY') === 0 ? this.dateRegexYearFirst : this.dateRegex).test(e.trim()) || (this.error = this.errorCodes.date.yearIsNotPositionedWhereItShould, !1) }

    isValidDate (e, t = 'DD/MM/YYYY', r = this.currentYear - 1, s = this.currentYear) { if (!this.isYearPositionedCorrectly(e, t)) return !1; const i = e.split('/'); const n = Number(i[this.getFieldIndexFromDate(t, 'DD')]); const o = Number(i[this.getFieldIndexFromDate(t, 'MM')]); const a = Number(i[this.getFieldIndexFromDate(t, 'YYYY')]); if (n < 1) return this.error = this.errorCodes.date.dayIsLessThanZero, !1; if (o < 1) return this.error = this.errorCodes.date.monthIsLessThanZero, !1; if (a < r || a > s) return this.error = this.errorCodes.date.yearIsNotInRange, !1; if (o > 12) return this.error = this.errorCodes.date.monthIsGreaterThanPermitted, !1; switch (o) { case 1: case 3: case 5: case 7: case 8: case 10: case 12: return n > 31 ? (this.error = this.errorCodes.date.dayIsGreaterThanPossible, !1) : (this.error = '', !0); case 4: case 6: case 9: case 11: return n > 30 ? (this.error = this.errorCodes.date.dayIsGreaterThanPossible, !1) : (this.error = '', !0); case 2: const e = a % 4 == 0; return !e && n > 28 || e && n > 29 ? (this.error = this.errorCodes.date.dayIsGreaterThanPossible, !1) : (this.error = '', !0) } return this.error = '', !0 }

    isValidPassword (e) { if (e.length < this.minPwdLenght) return this.error = this.errorCodes.password.lengthIsLowerThanPermitted, !1; if (e.length > this.maxPwdLength) return this.error = this.errorCodes.password.lengthIsGreaterThanPermitted, !1; const t = e.replace(/[^A-Z]/g, '').length; if (this.minAmountCapitalLetters > t) return this.error = this.errorCodes.password.capitalLettersAmountIsLessThanPermitted, !1; const r = e.replace(/[^a-z]/g, '').length; if (this.minAmountLowerLetters > r) return this.error = this.errorCodes.password.lowerLettersAmountIsLessThanPermitted, !1; const s = e.replace(this.symbolsRegex, '').length; return this.minAmountSymbols > s ? (this.error = this.errorCodes.password.symbolsAmountIsLessThanPermitted, !1) : (this.error = '', !0) }

    isMatching (e, t) { return !(e.match(t) === null) }
  }(); const r = ['number', 'text']; const s = ['text', 'search', 'password', 'email']; const i = (new Date()).getFullYear(); const
    n = (e, t) => void 0 !== e.find((e) => t === e); return HTMLInputElement.prototype.isEmpty = function () { return !!n(['number', 'text', 'search', 'password', 'email'], this.type) && t.isEmpty(this.value) }, HTMLInputElement.prototype.hasSpaces = function () { return !!n(['text', 'search', 'password', 'email'], this.type) && t.hasSpaces(this.value) }, HTMLInputElement.prototype.hasFractionalValue = function () { return !!n(r, this.type) && t.hasFractionalValue(this.value) }, HTMLInputElement.prototype.isNumber = function () { return !!n(r, this.type) && t.isNumber(this.value) }, HTMLInputElement.prototype.isPositive = function () { return !!n(r, this.type) && t.isPositive(this.value) }, HTMLInputElement.prototype.isNegative = function () { return !!n(r, this.type) && t.isNegative(this.value) }, HTMLInputElement.prototype.isZero = function () { return !!n(r, this.type) && t.isZero(this.value) }, HTMLInputElement.prototype.isInRange = function (e, s) { return !!n(r, this.type) && t.isInRange(this.value, e, s) }, HTMLInputElement.prototype.isInLengthRange = function (e, r) { return !!n(s, this.type) && t.isInLengthRange(this.value, e, r) }, HTMLInputElement.prototype.isEmail = function () { return !!n(s, this.type) && t.isEmail(this.value) }, HTMLInputElement.prototype.isYearPositionedCorrectly = function (e = 'DD/MM/YYYY') { return !!n(['text'], this.type) && t.isYearPositionedCorrectly(this.value, e) }, HTMLInputElement.prototype.isValidDate = function (e = 'DD/MM/YYYY', r = i - 1, s = i) { return !!n(['text'], this.type) && t.isValidDate(this.value, e, r, s) }, HTMLInputElement.prototype.isValidPassword = function () { return !!n(['text', 'password'], this.type) && t.isValidPassword(this.value) }, HTMLInputElement.prototype.isMatching = function (e) { return t.isMatching(this.value, e.value) }, String.prototype.isEmpty = function () { return t.isEmpty(JSON.parse(JSON.stringify(this))) }, String.prototype.hasSpaces = function () { return t.hasSpaces(JSON.parse(JSON.stringify(this))) }, String.prototype.hasFractionalValue = function () { return t.hasFractionalValue(JSON.parse(JSON.stringify(this))) }, String.prototype.isNumber = function () { return t.isNumber(JSON.parse(JSON.stringify(this))) }, String.prototype.isPositive = function () { return t.isPositive(JSON.parse(JSON.stringify(this))) }, String.prototype.isNegative = function () { return t.isNegative(JSON.parse(JSON.stringify(this))) }, String.prototype.isZero = function () { return t.isZero(JSON.parse(JSON.stringify(this))) }, String.prototype.isInRange = function (e, r) { return t.isInRange(JSON.parse(JSON.stringify(this)), e, r) }, String.prototype.isInLengthRange = function (e, r) { return t.isInLengthRange(JSON.parse(JSON.stringify(this)), e, r) }, String.prototype.isEmail = function () { return t.isEmail(JSON.parse(JSON.stringify(this))) }, String.prototype.isYearPositionedCorrectly = function (e = 'DD/MM/YYYY') { return t.isYearPositionedCorrectly(JSON.parse(JSON.stringify(this)), e) }, String.prototype.isValidDate = function (e = 'DD/MM/YYYY', r = i - 1, s = i) { return t.isValidDate(JSON.parse(JSON.stringify(this)), e, r, s) }, String.prototype.isValidPassword = function () { return t.isValidPassword(JSON.parse(JSON.stringify(this))) }, String.prototype.isMatching = function (e) { return t.isMatching(JSON.parse(JSON.stringify(this)), e) }, Number.prototype.hasFractionalValue = function () { return t.hasFractionalValue(JSON.parse(JSON.stringify(this))) }, Number.prototype.isPositive = function () { return t.isPositive(JSON.parse(JSON.stringify(this))) }, Number.prototype.isNegative = function () { return t.isNegative(JSON.parse(JSON.stringify(this))) }, Number.prototype.isZero = function () { return t.isZero(JSON.parse(JSON.stringify(this))) }, Number.prototype.isInRange = function (e, r) { return t.isInRange(JSON.parse(JSON.stringify(this)), e, r) }, Array.prototype.isEmpty = function () { return t.isEmpty(this) }, Array.prototype.areAllNumbers = function () { return !!t.isArrayOfTypes(this, ['number', 'string']) && t.areAllNumbers(this) }, Array.prototype.areAllPositives = function () { return !!t.isArrayOfTypes(this, ['number', 'string']) && t.areAllPositives(this) }, Array.prototype.areAllNegatives = function () { return !!t.isArrayOfTypes(this, ['number', 'string']) && t.areAllNegatives(this) }, Array.prototype.areAllZeros = function () { return !!t.isArrayOfTypes(this, ['number', 'string']) && t.areAllZeros(this) }, e
})()))
// # sourceMappingURL=data:application/json;charset=utf-8;base64,
